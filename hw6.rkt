#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 93 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 64 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1           0 4574 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         631 4           0 0           0 104 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 3 #"con"
0 0 24 3 1 #" "
0 0 14 3 4 #"con?"
0 0 24 3 1 #" "
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"con-arg2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 14 3 4 #"alt?"
0 0 24 3 1 #" "
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"alt-arg2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"rep"
0 0 24 3 1 #" "
0 0 14 3 4 #"rep?"
0 0 24 3 1 #" "
0 0 14 3 7 #"rep-arg"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"ques"
0 0 24 3 1 #" "
0 0 14 3 5 #"ques?"
0 0 24 3 1 #" "
0 0 14 3 8 #"ques-arg"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 8 #"reg-exp?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"flip"
0 0 24 3 1 #" "
0 0 14 3 9 #"try-flips"
0 0 24 3 1 #" "
0 0 14 3 4 #"pick"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 11 #"reg-exp-gen"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"dfa"
0 0 24 3 1 #" "
0 0 14 3 4 #"dfa?"
0 0 24 3 1 #" "
0 0 14 3 8 #"dfa-alph"
0 0 24 3 1 #" "
0 0 14 3 10 #"dfa-states"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"dfa-acc"
0 0 24 3 1 #" "
0 0 14 3 9 #"dfa-trans"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 6 #"entry?"
0 0 24 3 1 #" "
0 0 14 3 9 #"entry-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"entry-value"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"dfa-accepts?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 3 #"cfg"
0 0 24 3 1 #" "
0 0 14 3 4 #"cfg?"
0 0 24 3 1 #" "
0 0 14 3 16 #"cfg-nonterminals"
0 0 24 3 1 #" "
0 0 14 3 9 #"cfg-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"cfg-rules"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 14 3 5 #"rule?"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-lhs"
0 0 24 3 1 #" "
0 0 14 3 8 #"rule-rhs"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 7 #"cfg-gen"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"my-cfg"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"reg-exp->cfg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Please do not change lines above this one."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; CS 201a HW #6  DUE Wednesday, April 19 at 11:59 pm, "
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; via the submit system on the Zoo."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Name:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Email address:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Computer science topics: strings, languages, regular expressions,"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; deterministic finite state acceptors and context free grammars."
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Racket: operations on strings and characters."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; You may write auxiliary procedure(s) in addition to"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; the one(s) specified in the problem.  Please include"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; a comment for each one explaining its input and results."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; The following structs are used in the representation of Regular Ex"
 #"pressions."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"con"
0 0 24 3 2 #" ("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"alt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"rep"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"ques"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; A string is a Racket string.  Consult the Racket Reference"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; for information and procedures for strings and characters."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; A Regular Expression is defined recursively as follows:"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (1) a Racket string is a Regular Expression,"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; (2) If exp1 and exp2 are Regular Expressions, then so are"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; the following:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; (con exp1 exp2), the concatenation of exp1 and exp2"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; (alt exp1 exp2), the \"or\" of exp1 and exp2, that is (exp1 | exp2"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; (rep exp1), zero or more repetitions of exp1, that is, (exp1)*"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; (ques exp1), zero or one repetitions of exp1, that is (exp1)?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Examples of Regular Expressions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";mcm221"
0 0 17 3 1 #"3"
0 0 17 3 2 #"58"
0 0 17 3 1 #" "
0 0 17 3 3 #"   "
0 0 17 3 18 #"password: BKm4cmo$"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp1"
0 0 17 3 4 #" \"\")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp2"
0 0 17 3 9 #" \"abbab\")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp3"
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 4 #"\"ab\""
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"c\""
0 0 17 3 7 #" \"d\")))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp4"
0 0 17 3 2 #" ("
0 0 17 3 3 #"rep"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 1 #" "
0 0 17 3 4 #"\"00\""
0 0 17 3 8 #" \"11\")))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp5"
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"a\""
0 0 17 3 7 #" \"the\")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 1 #" "
0 0 17 3 8 #"\" mouse\""
0 0 17 3 9 #" \" cat\") "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 24 #"                       ("
0 0 17 3 3 #"alt"
0 0 17 3 1 #" "
0 0 17 3 6 #"\" ran\""
0 0 17 3 13 #" \" slept\"))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp6"
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 5 #"\"yog\""
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 4 #"ques"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"h\""
0 0 17 3 10 #") \"urt\")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 1 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Write a procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; (reg-exp? value)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The procedure (reg-exp? value) takes an arbitrary Racket value"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; and returns #t if it is a Regular Expression according to the"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; definition given above, and #f otherwise."
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Hint: write a recursive procedure patterned after the recursive de"
 #"finition"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; (reg-exp? exp1) => #t"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; and similarly for exp2 through exp6"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (reg-exp? 'a) => #f"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; (reg-exp? '(a b b a b)) => #f"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";****************************"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"con?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"alt?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rep?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"rep-arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ques?"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 8 #"reg-exp?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 2 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write three procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; (flip bias)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (try-flips count bias)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; (pick lst)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; The procedure (flip bias) simulates flipping a biased coin, "
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; where the bias is specified as a number between 0 and 1,"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; and the result is #t with probability equal to the bias "
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; and #f with probability (1 - bias). "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; The procedure (try-flips count bias)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; calls (flip bias) the number of times specified by count"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; and returns a list of two integers:"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; the first is how many times the flip returned #t"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; and the second is how many times the flip returned #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Note that the racket procedure (random) returns a random"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; number between 0 and 1."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; The procedure (pick lst) takes a list lst and returns"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; a randomly chosen element of lst.  If lst is empty, the"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; value returned should be #f.  You can test it by picking 10000"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; times from a list with 10 elements, and making sure that"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; each element is picked about 1000 times."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Examples (your results will randomly vary)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";> (flip .9)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";> (flip .9)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (try-flips 1000 .4)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";'(427 573)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (try-flips 1000 .69)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";'(686 314)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (pick '(a b c d e))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";'c"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (pick '(a b c d e))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";'e"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"flip"
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #") "
0 0 14 3 4 #"bias"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"try-flips"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"try-flips-aux"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tally-result"
0 0 24 3 1 #" "
0 0 14 3 12 #"bias-outcome"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"bias-outcome"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))) ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"try-flips-aux"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"try-flips-aux"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"bias"
0 0 24 3 2 #" ("
0 0 14 3 12 #"tally-result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"flip"
0 0 24 3 1 #" "
0 0 14 3 4 #"bias"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      ( ("
0 0 14 3 18 #"odds-for-each-item"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"element"
0 0 24 3 2 #" ("
0 0 14 3 13 #"exact-ceiling"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 18 #"odds-for-each-item"
0 0 24 3 5 #"))) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"test-pick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 6 #"result"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"test-pick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 9 #"test-pick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"result"
0 0 24 3 5 #") )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 9 #"test-pick"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 2 #") "
0 0 17 3 5 #"10000"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         457 4           0 0           0 75 0 14 3 7 #"element"
0 0 24 3 2 #"  "
0 0 14 3 4 #"indv"
0 0 24 3 1 #" "
0 0 14 3 7 #"element"
0 0 24 3 1 #" "
0 0 14 3 4 #"odds"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"1"
0 0 24 3 8 #"        "
0 0 21 3 3 #"100"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"2"
0 0 24 3 8 #"        "
0 0 21 3 2 #"50"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"3"
0 0 24 3 8 #"        "
0 0 21 3 5 #"33.33"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 11 #"100/element"
0 0 24 3 1 #" "
0 0 14 3 7 #"length:"
0 0 24 3 1 #" "
0 0 14 3 6 #"chance"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 7 #"picking"
0 0 24 3 1 #" "
0 0 14 3 4 #"each"
0 0 24 3 3 #"   "
0 0 21 3 5 #"33.33"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"1st:"
0 0 24 3 1 #" "
0 0 14 3 4 #"0-33"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"2nd:"
0 0 24 3 1 #" "
0 0 14 3 5 #"34-66"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"3rd:"
0 0 24 3 1 #" "
0 0 14 3 6 #"66-100"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 3 #"say"
0 0 24 3 1 #" "
0 0 21 3 2 #"90"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 7 #"number."
0 0 24 3 2 #"  "
0 0 21 3 5 #"90/33"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 3 #"see"
0 0 24 3 1 #" "
0 0 14 3 5 #"which"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 2 #"it"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 3 ** (20 points)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Write a procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (reg-exp-gen exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; that takes a Regular Expression exp and"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; returns a random string in the language"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; denoted by exp.  Every string in the language"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; must have a positive probability of being chosen,"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; and every string not in the language must have a"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; probability of 0 of being chosen."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; (con exp1 exp2), the concatenation of exp1 and exp2"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; (alt exp1 exp2), the \"or\" of exp1 and exp2, that is (exp1 | exp2"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; (rep exp1), zero or more repetitions of exp1, that is, (exp1)*"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; (ques exp1), zero or one repetitions of exp1, that is (exp1)?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"abbab\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"con"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"ab\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"d\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp4"
0 0 24 3 2 #" ("
0 0 14 3 3 #"rep"
0 0 24 3 2 #" ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"00\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"11\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp5"
0 0 24 3 2 #" ("
0 0 14 3 3 #"con"
0 0 24 3 2 #" ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"the\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"con"
0 0 24 3 2 #" ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 19 3 8 #"\" mouse\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\" cat\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"alt"
0 0 24 3 1 #" "
0 0 19 3 6 #"\" ran\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\" slept\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp6"
0 0 24 3 2 #" ("
0 0 14 3 3 #"con"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"yog\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"con"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ques"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"h\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"urt\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Examples (yours may randomly differ):"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp1)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";\"\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp2)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";\"abbab\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";\"abc\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp4)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";\"001111110000111111111100\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp4)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";\"\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp5)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";\""
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"mouse"
0 0 17 3 7 #" slept\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp6)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";\"yoghurt\""
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (reg-exp-gen exp6)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";\"yogurt\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"reg-exp-gen"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"pick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";given"
0 0 17 3 80
(
 #" a list of string and a single string, return all possible combinati"
 #"on of concat"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";the"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 14 #" single string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-first?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-first?"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-first?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-first?"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";given"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 6 #"string"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 9 #" list of "
0 0 17 3 6 #"string"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 1 #" "
0 0 17 3 3 #"all"
0 0 17 3 1 #" "
0 0 17 3 8 #"possible"
0 0 17 3 1 #" "
0 0 17 3 11 #"combination"
0 0 17 3 10 #" of concat"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lst-lst-combo"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #") ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 13 #"lst-lst-combo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"rule?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))   ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #"))))  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"rule?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 9 #";(delist "
0 0 17 3 4 #"'((\""
0 0 17 3 2 #"ac"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 2 #"ad"
0 0 17 3 1 #"\""
0 0 17 3 4 #") (\""
0 0 17 3 2 #"bc"
0 0 17 3 9 #"\" \"bd\")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";given"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"reg-e,"
0 0 17 3 1 #" "
0 0 17 3 36 #"list all the strings in the language"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"all-strings"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 4 #"con?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))) "
0 0 17 3 7 #";(con \""
0 0 17 3 2 #"ab"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"cd"
0 0 17 3 12 #"\") => \"abcd\""
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")))  "
0 0 17 3 12 #";(con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\") => (\""
0 0 17 3 2 #"ac"
0 0 17 3 4 #"\", \""
0 0 17 3 2 #"bc"
0 0 17 3 19 #"\")      (con (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 7 #"\") \"a\")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 16 #"string-lst-combo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))  ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")  "
0 0 21 3 2 #"#t"
0 0 24 3 5 #")))  "
0 0 17 3 8 #"; (con \""
0 0 17 3 1 #"a"
0 0 17 3 8 #"\" (alt \""
0 0 17 3 1 #"c"
0 0 17 3 7 #"\" \"b\"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lst-lst-combo"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 10 #")))))  )))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 12 #";(con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 9 #"\") (alt \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 17 #"\"))   (con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 10 #"\") (cons \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 16 #"\"))  (con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 10 #"\") (cons \""
0 0 17 3 1 #"a"
0 0 17 3 7 #"\" \"b\"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 2 #";("
0 0 17 3 8 #"con (alt"
0 0 17 3 7 #" (con \""
0 0 17 3 1 #"b"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"d"
0 0 17 3 9 #"\") (alt \""
0 0 17 3 1 #"c"
0 0 17 3 7 #"\" \"d\"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 4 #"alt?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #")))) "
0 0 17 3 8 #"; (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 9 #"\") => '(\""
0 0 17 3 1 #"a"
0 0 17 3 6 #"\" \"b\")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))) "
0 0 17 3 12 #";(alt (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\") => (\""
0 0 17 3 2 #"ab"
0 0 17 3 7 #"\", \"c\")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))) "
0 0 17 3 11 #";    (alt \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\" (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 12 #"\"))   (alt \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\" (alt \""
0 0 17 3 1 #"a"
0 0 17 3 8 #"\" \"b\")) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #")))) ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 15 #")))))))  ))    "
0 0 17 3 13 #"; (alt (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 9 #"\") (con \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 9 #"\")) => (\""
0 0 17 3 2 #"ab"
0 0 17 3 8 #"\", \"cd\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ques?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-strings"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 11 #"))))))  )) "
0 0 17 3 12 #";(rep (alt \""
0 0 17 3 2 #"00"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 9 #"\")) => (\""
0 0 17 3 1 #" "
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"0"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 18 #"\")    (rep (cons \""
0 0 17 3 2 #"00"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 9 #"\")) => (\""
0 0 17 3 10 #" \" \"0011\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"all-strings"
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" \""
0 0 17 3 2 #"ab"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 2 #"cd"
0 0 17 3 4 #"\")) "
0 0 17 3 13 #";(all-strings"
0 0 17 3 2 #" ("
0 0 17 3 10 #"con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 5 #"\")  \""
0 0 17 3 1 #"c"
0 0 17 3 18 #"\"))  ;(all-strings"
0 0 17 3 2 #" ("
0 0 17 3 5 #"con \""
0 0 17 3 1 #"c"
0 0 17 3 1 #"\""
0 0 17 3 2 #" ("
0 0 17 3 5 #"alt \""
0 0 17 3 1 #"a"
0 0 17 3 8 #"\" \"b\")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"all-strings"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #"a"
0 0 17 3 1 #"\""
0 0 17 3 7 #" \"b\") )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"all-strings"
0 0 17 3 2 #" ("
0 0 17 3 4 #"ques"
0 0 17 3 7 #" \"a\") )"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(all-strings ("
0 0 17 3 5 #"con ("
0 0 17 3 5 #"alt \""
0 0 17 3 1 #"a"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 3 #"the"
0 0 17 3 1 #"\""
0 0 17 3 3 #") ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 5 #"mouse"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 3 #"cat"
0 0 17 3 1 #"\""
0 0 17 3 3 #") ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 3 #"ran"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 11 #" slept\"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; A (possibly incomplete) Deterministic Finite State Acceptor (DFA)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; is represented by the following struct."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"dfa"
0 0 24 3 2 #" ("
0 0 14 3 4 #"alph"
0 0 24 3 1 #" "
0 0 14 3 6 #"states"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 5 #"trans"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; where "
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; alph is a list of Racket characters -- the symbols of the alphabet"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; states is a list of Racket symbols"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; start is one of the elements of states (the start state)"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; acc is a list containing some of the elements of states (the accep"
 #"ting states)"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #"; and trans is a table whose entries"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";    have a key that is a list containing a state and a member of th"
 #"e alphabet"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";         a value that is a state"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Examples of DFAs."
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Here is a DFA for the language of all strings of a's and b's with"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; an odd number of a's and any number of b's."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"odd-as"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"dfa"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"even"
0 0 24 3 1 #" "
0 0 14 3 3 #"odd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 14 3 4 #"even"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"odd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"even"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"odd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"even"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"even"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"odd"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"even"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"odd"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"odd"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Here is an (incomplete) DFA to accept the language of the"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; regular expression c(a|d)(a|d)*r"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"car-cdr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"dfa"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\c"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\d"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 5 #"saw-c"
0 0 24 3 1 #" "
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #" "
0 0 14 3 5 #"saw-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"saw-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"saw-c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"saw-c"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"saw-c"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\d"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\d"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"saw-a-or-d"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\r"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"saw-r"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 4 ** (20 points)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Write a procedure "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (dfa-accepts? mach str)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; to take a DFA mach and a Racket string str and determine whether t"
 #"he"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; DFA accepts the string.  Note that if an undefined transition"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; is encountered, the string is rejected."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";> (dfa-accepts? odd-as \"aababa\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";> (dfa-accepts? odd-as \"bbabbb\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";> (dfa-accepts? car-cdr \"cadar\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";> (dfa-accepts? car-cdr \"card\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";> (dfa-accepts? odd-as \"what?\")"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 3 #"dfa"
0 0 17 3 2 #" ("
0 0 17 3 4 #"alph"
0 0 17 3 1 #" "
0 0 17 3 6 #"states"
0 0 17 3 1 #" "
0 0 17 3 5 #"start"
0 0 17 3 1 #" "
0 0 17 3 3 #"acc"
0 0 17 3 1 #" "
0 0 17 3 5 #"trans"
0 0 17 3 16 #") #:transparent)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"dfa-accepts?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ("
0 0 14 3 11 #"final-state"
0 0 24 3 2 #" ("
0 0 14 3 15 #"simulate-states"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dfa-start"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 5 #"))) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-state"
0 0 24 3 2 #" ("
0 0 14 3 7 #"dfa-acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; simulate till we get to the final state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"simulate-states"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-incr"
0 0 24 3 1 #" "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-incr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 10 #"curr-state"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"simulate-states"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"next-dfa-state"
0 0 24 3 2 #" ("
0 0 14 3 9 #"dfa-trans"
0 0 24 3 1 #" "
0 0 14 3 4 #"mach"
0 0 24 3 2 #") "
0 0 14 3 10 #"curr-state"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 8 #"str-incr"
0 0 24 3 7 #")))  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"1.(simulate-states"
0 0 17 3 1 #" "
0 0 17 3 24 #"odd-as \"aababa\" 0 'even)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 15 #"simulate-states"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 2 #" \""
0 0 17 3 6 #"aababa"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #" ("
0 0 17 3 14 #"next-dfa-state"
0 0 17 3 2 #" ("
0 0 17 3 9 #"dfa-trans"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 10 #"even #\\a))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 15 #"simulate-states"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 2 #" \""
0 0 17 3 6 #"aababa"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 6 #" 'odd)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 15 #"simulate-states"
0 0 17 3 1 #" "
0 0 17 3 8 #"odd-as \""
0 0 17 3 2 #"aa"
0 0 17 3 2 #"\" "
0 0 17 3 1 #"0"
0 0 17 3 9 #" 'even) ("
0 0 17 3 15 #"simulate-states"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 2 #" \""
0 0 17 3 2 #"aa"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"odd"
0 0 17 3 3 #") ("
0 0 17 3 15 #"simulate-states"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 2 #" \""
0 0 17 3 2 #"aa"
0 0 17 3 1 #"\""
0 0 17 3 1 #" "
0 0 17 3 4 #"1 ')"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";given a dfa state and a string and the transition table, return the"
 #" next state"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 14 #"next-dfa-state"
0 0 17 3 2 #" ("
0 0 17 3 9 #"dfa-trans"
0 0 17 3 1 #" "
0 0 17 3 6 #"odd-as"
0 0 17 3 20 #") 'even #\\a) => 'odd"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"next-dfa-state"
0 0 24 3 1 #" "
0 0 14 3 10 #"trans-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"trans-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 3 #") ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"trans-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"entry-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"trans-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"next-dfa-state"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"trans-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"state"
0 0 24 3 1 #" "
0 0 14 3 4 #"char"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; A Context Free Grammar (CFG) is represented using the following."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"cfg"
0 0 24 3 2 #" ("
0 0 14 3 12 #"nonterminals"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 5 #"rules"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";cgf:"
0 0 17 3 1 #" "
0 0 17 3 3 #"two"
0 0 17 3 1 #" "
0 0 17 3 4 #"sets"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 11 #"nonterminal"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 9 #" terminal"
0 0 17 3 1 #" "
0 0 17 3 9 #"alphabets"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"set"
0 0 17 3 1 #" "
0 0 17 3 7 #"of rule"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; where"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; nonterminals is a list of Racket symbols"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; start is an element of the nonterminal list"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; rules is a list of rule structs -- each of which has"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; a lhs that is an element of the nonterminals list, and"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; a rhs that is a list of elements that may be from the nonterminals"
 #" list"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";   or may be Racket strings"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Examples of CFGs."
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Here is an example CFG from lecture."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"grammar-mcd"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cfg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"pn"
0 0 24 3 1 #" "
0 0 14 3 2 #"vi"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 14 3 2 #"vp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"pn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"the\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"mouse\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"cat\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"dog\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"pn"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 4 #"\"it\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"vi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 14 3 2 #"np"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"v3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"that\""
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"slept\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"swam\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"chased\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 8 #"\"evaded\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"v3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 9 #"\"dreamed\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"v3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 10 #"\"believed\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Here is the grammar for the set of strings consisting of"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; n a's followed by n b's, for all nonnegative integers n."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"grammar-anbn"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cfg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Here is a grammar that generates some statements in MiniJava"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; This is not the same as the MiniJava grammar distributed in class."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"grammar-mj"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cfg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 18 #"boolean-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 14 3 15 #"integer-literal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"}\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 9 #"statement"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 18 #"boolean-expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 19 #"\"System.out.prntln\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 18 #"boolean-expression"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 15 #"integer-literal"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"sum\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"integer-literal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"0\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"integer-literal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"integer-literal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"6\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 5 ** (20 points)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Write a procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (cfg-gen grammar)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; that takes a CFG grammar and produces a randomly chosen element of"
 #" the language of the grammar."
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Every element in the language of the grammar should have a non-zer"
 #"o"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; probability of being generated, and every element not in the langu"
 #"age"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #"; should have probability 0 of being generated."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Hint: one way to approach this is to write an auxiliary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; that takes a grammar and a list of nonterminal symbols and strings"
 #", and"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; (1) returns the list of strings if there are no nonterminal symbol"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#"; (2) calls itself recursively after replacing the leftmost"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; nonterminal in the list by the righthand side of "
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; a randomly chosen grammar rule which has that nonterminal as its l"
 #"efthand side."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";> (cfg-gen grammar-mcd)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";'(\"it\" \"dreamed\" \"that\" \"a\" \"mouse\" \"slept\")"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";> (cfg-gen grammar-anbn)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";'(\"a\" \"\" \"b\")"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (cfg-gen grammar-mj)"
0 0 24 29 1 #"\n"
0 0 17 3 55
(
 #";'(\"{\" \"System.out.prntln\""
 #" \"(\" \"0\" \"-\" \"6\" \")\" \";\" \"}\")"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; For better-looking outputs:"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";> (string-join (cfg-gen grammar-mcd))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";\"it evaded it\""
0 0 24 29 1 #"\n"
0 0 17 3 47 #";> (apply string-append (cfg-gen grammar-anbn))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";\"\""
0 0 24 29 1 #"\n"
0 0 17 3 47 #";> (apply string-append (cfg-gen grammar-anbn))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";\"ab\""
0 0 24 29 1 #"\n"
0 0 17 3 47 #";> (apply string-append (cfg-gen grammar-anbn))"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";\"aaaaabbbbb\""
0 0 24 29 1 #"\n"
0 0 17 3 37 #";> (string-join (cfg-gen grammar-mj))"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";\"{ System.out.prntln ( 6 ) ; while ( n < 1 ) { System.out.prntln ("
 #" 1 + 1 - sum + sum ) ; n = sum ; } }\""
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cfg-gen"
0 0 24 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cfg-gen-aux"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cfg-rules"
0 0 24 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 24 3 3 #") ("
0 0 14 3 9 #"next-rule"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cfg-start"
0 0 24 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 24 3 3 #") ("
0 0 14 3 9 #"cfg-rules"
0 0 24 3 1 #" "
0 0 14 3 7 #"grammar"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";test for a list of ONLY strings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lst-of-strings?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"lst-of-strings?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";given a rule list and a symbol, assemble a list of all the rules fo"
 #"r the"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";left-side"
0 0 17 3 21 #" nonterminal symbol. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"a-symbols-rule-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 2 #") "
0 0 14 3 5 #"symbl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"rule-lhs"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 3 #")) "
0 0 14 3 5 #"symbl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 3 #") ("
0 0 14 3 19 #"a-symbols-rule-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 19 #"a-symbols-rule-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 8 #"))  ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";given a symbol and a list of rules with that specific symbol (using"
 #" above function)"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";, then pick"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"random"
0 0 17 3 1 #" "
0 0 17 3 4 #"rule"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 20 #" the right-hand-side"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-rule"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"rule-rhs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pick"
0 0 24 3 2 #" ("
0 0 14 3 19 #"a-symbols-rule-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"symbl"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";given a LIST of symbols, returns all resulting right-sides"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 9 #"rule-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 9 #"next-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"rule-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-rule"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"rule-list"
0 0 24 3 3 #") ("
0 0 14 3 9 #"next-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"rule-list"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cfg-gen-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 12 #"starting-rhs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ("
0 0 14 3 11 #"curr-return"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 9 #"next-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"starting-rhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")) ) )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"lst-of-strings?"
0 0 24 3 1 #" "
0 0 14 3 11 #"curr-return"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 11 #"curr-return"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cfg-gen-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 11 #"curr-return"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(next-rule"
0 0 17 3 29 #" 'np (cfg-rules grammar-mcd))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 19 #"a-symbols-rule-list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"np"
0 0 17 3 2 #" ("
0 0 17 3 23 #"cfg-rules grammar-mcd))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"np"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"det"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 4 #")) ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"np"
0 0 17 3 1 #" "
0 0 17 3 7 #"'(pn)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"cfg-gen-aux"
0 0 17 3 2 #" ("
0 0 17 3 9 #"cfg-rules"
0 0 17 3 1 #" "
0 0 17 3 26 #"grammar-mcd) starting-rhs)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 6 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; Define your own CFG named my-cfg of complexity at least as great a"
 #"s "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; that of grammar-mcd.  Give (as comments) some examples of sentence"
 #"s "
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #"; generated by your grammar. "
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; (Please do more than just copy grammar-mcd with a few changes!!!)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"my-cfg"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cfg"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"not\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"done\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"yet\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 7 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Write a procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (reg-exp->cfg exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; that takes a regular expression exp"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; returns a context free grammar for the language denoted by exp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; Examples (yours may differ randomly)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp1)))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";\"\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp2)))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";\"abbab\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp3)))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";\"abd\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp4)))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";\"1100\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp5)))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";\"the mouse ran\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";> (apply string-append (cfg-gen (reg-exp->cfg exp6)))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";\"yogurt\""
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";non-determinals applicable only to grammar-mcd for demonstrative pu"
 #"rpose"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"reg-exp->cfg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cfg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"pn"
0 0 24 3 1 #" "
0 0 14 3 2 #"vi"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"delist"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"np"
0 0 24 3 1 #" "
0 0 14 3 2 #"vp"
0 0 24 3 1 #" "
0 0 14 3 3 #"det"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"pn"
0 0 24 3 1 #" "
0 0 14 3 2 #"vi"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";create rules for cfg.istead of a list of non-terminal symbols, we u"
 #"se numbers instead"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 4 #"con?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))) "
0 0 17 3 7 #";(con \""
0 0 17 3 2 #"ab"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"cd"
0 0 17 3 27 #"\") => (rule incr '(\"abcd\"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 7 #")))))  "
0 0 17 3 12 #";(con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"c"
0 0 17 3 30 #"\") => (rule incr ( (+1 incr) \""
0 0 17 3 1 #"c"
0 0 17 3 20 #"\"))      (con (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 7 #"\") \"a\")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #")))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 8 #"))))))  "
0 0 17 3 8 #"; (con \""
0 0 17 3 1 #"a"
0 0 17 3 8 #"\" (alt \""
0 0 17 3 1 #"c"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 35 #"\")) => (rule incr ( \"a\" (+1 incr)) "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"con-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 10 #")) )))) ))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 12 #";(con (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 9 #"\") (alt \""
0 0 17 3 1 #"c"
0 0 17 3 46 #"\" \"d\")) => (rule incr '((+ 1 incr) (+2 incr)))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 2 #";("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #"a"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 1 #"b"
0 0 17 3 1 #"\""
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" \""
0 0 17 3 1 #"a"
0 0 17 3 9 #"\" \"b\"))  "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 2 #";("
0 0 17 3 15 #"con (alt (con \""
0 0 17 3 1 #"b"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"d"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"d"
0 0 17 3 9 #"\") (alt \""
0 0 17 3 1 #"c"
0 0 17 3 7 #"\" \"d\"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 4 #"alt?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #"))))) "
0 0 17 3 8 #"; (alt \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 20 #"\") => (rule incr '(\""
0 0 17 3 1 #"a"
0 0 17 3 22 #"\")) (rule incr '(\"b\"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 8 #"))) ) ) "
0 0 17 3 12 #";(alt (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 4 #"\") \""
0 0 17 3 1 #"c"
0 0 17 3 25 #"\") => (rule incr '(\"c\")) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 6 #")))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 9 #"))) ) )  "
0 0 17 3 11 #";    (alt \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\" (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"b"
0 0 17 3 12 #"\"))   (alt \""
0 0 17 3 1 #"c"
0 0 17 3 8 #"\" (alt \""
0 0 17 3 1 #"a"
0 0 17 3 8 #"\" \"b\")) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg1"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alt-arg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 7 #")) )) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 18 #")) ))    )) ))    "
0 0 17 3 13 #"; (alt (con \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 10 #"b\") (con \""
0 0 17 3 58
#"c\" \"d\")) => (rule incr (+ 1 incr))  (rule incr (+ 2 incr))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ques?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 4 #")) ("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"ques-arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 7 #")))  ) "
0 0 17 3 2 #";("
0 0 17 3 4 #"ques"
0 0 17 3 5 #" \"a\")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-rule"
0 0 24 3 1 #" "
0 0 14 3 7 #"nt-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ques-arg"
0 0 24 3 2 #") "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 9 #"))  )))) "
0 0 17 3 12 #";(rep (alt \""
0 0 17 3 2 #"00"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 9 #"\")) => (\""
0 0 17 3 1 #" "
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"0"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 18 #"\")    (rep (cons \""
0 0 17 3 2 #"00"
0 0 17 3 3 #"\" \""
0 0 17 3 2 #"11"
0 0 17 3 9 #"\")) => (\""
0 0 17 3 1 #" "
0 0 17 3 9 #"\" \"0011\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";given"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 44 #" reg-e, list all the strings in the language"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(all-strings exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 3 #"cfg"
0 0 17 3 2 #" ("
0 0 17 3 12 #"nonterminals"
0 0 17 3 1 #" "
0 0 17 3 5 #"start"
0 0 17 3 22 #" rules) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 4 #"rule"
0 0 17 3 2 #" ("
0 0 17 3 3 #"lhs"
0 0 17 3 20 #" rhs) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 4 #"arg1"
0 0 17 3 21 #" arg2) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 3 #"alt"
0 0 17 3 2 #" ("
0 0 17 3 4 #"arg1"
0 0 17 3 21 #" arg2) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 3 #"rep"
0 0 17 3 21 #" (arg) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 4 #"ques"
0 0 17 3 21 #" (arg) #:transparent)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 4 #"exp6"
0 0 17 3 2 #" ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #"a"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 3 #"the"
0 0 17 3 1 #"\""
0 0 17 3 3 #") ("
0 0 17 3 3 #"con"
0 0 17 3 2 #" ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 5 #"mouse"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 3 #"cat"
0 0 17 3 1 #"\""
0 0 17 3 3 #") ("
0 0 17 3 3 #"alt"
0 0 17 3 2 #" \""
0 0 17 3 1 #" "
0 0 17 3 3 #"ran"
0 0 17 3 1 #"\""
0 0 17 3 2 #" \""
0 0 17 3 24 #" slept\")) ))        ques"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(define grammar-mcd"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";  (cfg"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"   '"
0 0 17 3 3 #"(s "
0 0 17 3 5 #"np vp"
0 0 17 3 1 #" "
0 0 17 3 4 #"det "
0 0 17 3 14 #"n pn vi vt v3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";   's"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";   (list"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"(np vp))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"np"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"(det n))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"np"
0 0 17 3 7 #" '(pn))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"det"
0 0 17 3 1 #" "
0 0 17 3 7 #"'(\"a\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"det"
0 0 17 3 1 #" "
0 0 17 3 9 #"'(\"the\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 11 #"'(\"mouse\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 9 #"'(\"cat\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"n"
0 0 17 3 1 #" "
0 0 17 3 9 #"'(\"dog\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"pn"
0 0 17 3 1 #" "
0 0 17 3 8 #"'(\"it\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"vp"
0 0 17 3 10 #" '(vi)))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"starting"
0 0 17 3 1 #" "
0 0 17 3 6 #"either"
0 0 17 3 1 #" "
0 0 17 3 3 #"has"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 2 #"or"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 7 #"element"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"rhs"
0 0 17 3 1 #" "
0 0 17 3 9 #"depending"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"start"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"exp"
0 0 17 3 2 #" ("
0 0 17 3 4 #"con?"
0 0 17 3 12 #" alt? ques?)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"multiple"
0 0 17 3 1 #" "
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 6 #"symbol"
0 0 17 3 1 #" "
0 0 17 3 6 #"occurs"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 7 #"reg-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"="
0 0 17 3 1 #" "
0 0 17 3 11 #"alt or ques"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"rule"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 4 #"both"
0 0 17 3 1 #" "
0 0 17 3 7 #"strings"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 10 #"exp in rhs"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";given an regular expression, if both args are string, return it, if"
 #" arg is exp, give it a name from list"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #"; use (reg-exp? value)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 10 #"create-rhs"
0 0 17 3 11 #" exp incr))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0           0
