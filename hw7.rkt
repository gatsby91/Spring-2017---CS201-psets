#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 93 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 64 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1           0 1965 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         199 4           0 0           0 32 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 14 3 15 #"time-many-calls"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 9 #"tr-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"ntr-length"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"insert"
0 0 24 3 1 #" "
0 0 14 3 5 #"merge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 11 #"divide-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"isort"
0 0 24 3 1 #" "
0 0 14 3 5 #"msort"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 6 #"visort"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 14 #"count-compares"
0 0 24 3 1 #")"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Please do not change lines above this one."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; CS 201a HW #7  DUE  Wednesday, April 26, 11:59 pm "
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; via the submit system on the Zoo.  Without a \"Temporary Incomplet"
 #"e\""
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; from you residential college dean, no homework can be accepted"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; after the last day of Reading Period, that is, after May 4."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Name:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Email address:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Computer science topics: running times of programs, insertion sort"
 #","
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #"; merge sort.  Racket topics: vectors."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; You may write auxiliary procedure(s) in addition to"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; the one(s) specified in the problem.  Please include"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; a comment for each one explaining its input and results."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";INSERTION SORT"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 18 #"insertion-sort-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";given an item an a sorted list, insert the item such that"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; the ist remained ordered"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"insert-item"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 11 #"insert-item"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 8 #" )) ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";given insert-item proc and an unsorted list, return a"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";sorted list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"insertion-sort-aux"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-lst"
0 0 24 3 3 #") ("
0 0 14 3 18 #"insertion-sort-aux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"empty-lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"insertion-sort-aux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 3 #") ("
0 0 14 3 11 #"insert-item"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"unsorted-lst"
0 0 24 3 2 #") "
0 0 14 3 9 #"empty-lst"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";MERGE SORT"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(merge-sort"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"9"
0 0 17 3 4 #" 61 "
0 0 17 3 3 #"82 "
0 0 17 3 28 #"8 17 6 4 9 10 15 29 78 4 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"merge-sort"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 19 #"all-sorted-sublists"
0 0 24 3 2 #" ("
0 0 14 3 18 #"map-insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 14 #"map-halve-auto"
0 0 24 3 2 #" ("
0 0 14 3 10 #"halve-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))) )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"merge-auto"
0 0 24 3 1 #" "
0 0 14 3 19 #"all-sorted-sublists"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";given a list, divide it into two parts"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";>"
0 0 17 3 2 #" ("
0 0 17 3 4 #"take"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 3 #") ("
0 0 17 3 8 #"quotient"
0 0 17 3 2 #" ("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 7 #"5)) 2))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";'"
0 0 17 3 1 #"("
0 0 17 3 4 #"3 2)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"halve-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";(("
0 0 17 3 2 #"<="
0 0 17 3 2 #" ("
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 3 #"lst"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 6 #") lst)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"take"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 5 #"))  ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";apply halve-list to a list of list of numbers ONCE"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"map-halve-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"halve-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 10 #"halve-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"map-halve-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";a function to see if any list of the list has size bigger than 2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lst>2?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"lst>2?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";given two list of number, recrusively turn them into a list of list"
 #"s of 2 or less elements"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"map-halve-auto"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lst>2?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"map-halve-auto"
0 0 24 3 2 #" ("
0 0 14 3 14 #"map-halve-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 99
(
 #";(map-halve-auto (halve-list lst)); break down each list into a list"
 #" of lists of 2 or less elements"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 67
#"; a function to apply insertion sort to all above list individually"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"map-insertion-sort"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"map-insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 18 #"map-insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";(map-insertion-sort  (map-halve-auto ("
0 0 17 3 10 #"halve-list"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"9"
0 0 17 3 1 #" "
0 0 17 3 3 #"61 "
0 0 17 3 2 #"82"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 1 #" "
0 0 17 3 3 #"17 "
0 0 17 3 1 #"6"
0 0 17 3 32 #" 4 9 10 15 29 78 4 0) )))       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";given two sorted list, merge them"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"merge"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 7 #")))) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";given a list of lists, continually merge the first two ONCE"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"map-merge"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"map-merge"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"merge-auto"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"merge-auto"
0 0 24 3 2 #" ("
0 0 14 3 9 #"map-merge"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #") )))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Timing procedures."
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; The Racket procedure (current-inexact-milliseconds)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; returns a real (in the sense of Racket) number representing"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; the current time in milliseconds since midnight UTC, January 1, 19"
 #"70."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 1 ** (15 points)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (random-list n)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (time-many-calls reps proc args)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; (random-list n) takes a non-negative number n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; and returns a list of length n of randomly chosen "
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; real numbers between 0 and 1."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; Note that (random) returns a random number between 0 and 1."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; (time-many-calls reps proc args) takes "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; a nonnegative integer, reps,"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; a procedure, proc,"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; a list of arguments for the procedure, args,"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; and returns the amount of time in SECONDS elapsed"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; in calling proc on args a number of times equal to reps."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Recall that we can apply a proc to a list of argument args"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; with (apply proc args)."
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Note that a millisecond is 1/1000 of a second."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; The following examples of time-many-calls were run on a Zoo"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; workstation, calling the built-in compare procedure (<=)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; a certain number of times on the arguments 13 and 14."
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; The times for 10^4, 10^5, 10^6 and 10^7 repetitions"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; were about 0.0003 seconds, 0.0057 seconds, 0.0609 seconds, and"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; 0.5600 seconds, respectively."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Except in the first case, multiplying the number of repetitions"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; by 10 approximately multiplies the measured time by 10,"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; so in the range of repetitions between 10^5 and 10^7,"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; constant time (time Theta(1)) seems like a reasonable model"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; of the time for the operation (<= 13 14)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";> (time-many-calls 1000 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";4.1015625e-05"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";> (time-many-calls 10000 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";0.000259033203125"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e5 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";0.00566796875"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e6 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";0.06086083984375"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e7 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";0.55958984375"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; This second set of timings illustrates random variation in"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; these measurements on the same Zoo node.  Timings on your"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; laptop may be noticeably different."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";> (time-many-calls 1000 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";5.419921875e-05"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";> (time-many-calls 10000 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";0.0002880859375"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e5 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";0.005796875"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e6 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";0.055732177734375"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";> (time-many-calls 1e7 <= '(13 14))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";0.5537509765625"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; The following examples show timings (on a Zoo node)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; for creating lists of 100,000 or 200,000 or 300,000"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; random numbers."
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Less than a tenth of a second suffices in the last case."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";> (time-many-calls 1 random-list '(100000))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";0.014049072265625"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";> (time-many-calls 1 random-list '(200000))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";0.02800390625"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";> (time-many-calls 1 random-list '(300000))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";0.06631005859375"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";******************************(******************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 3 #") ("
0 0 14 3 11 #"random-list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"run-a-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"reps"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"reps"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 10 #"run-a-proc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"reps"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 5 #") )))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 14 3 4 #"reps"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      ( ("
0 0 15 3 14 #"beginning-time"
0 0 24 3 2 #" ("
0 0 14 3 28 #"current-inexact-milliseconds"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"run-proc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"run-a-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"reps"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 28 #"current-inexact-milliseconds"
0 0 24 3 2 #") "
0 0 15 3 14 #"beginning-time"
0 0 24 3 3 #")  "
0 0 21 3 4 #"1000"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 2 ** (15 points)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; For this problem, you will use your procedures"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; random-list and time-many-calls"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; to time the built-in Racket procedures:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; length, vector-ref, list-ref"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; reporting the requested measurements, and answering the related qu"
 #"estions."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; *Comment out* your responses with semicolons."
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Also, please *comment out* with semicolons the creation of"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; long vectors and lists, or your procedures may fail the timeouts"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; and lose credit!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; For length, create lists of lengths k*100,000 for k = 1,2,3,4 "
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; and report measurements of 1000 repetitions of calling length"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; on these lists."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; QUESTION: what can you say about how the time for (length lst)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; grows as a function of the length of lst?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";*the runnig time increasesly linearly as the inputs increases.* "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; For vector-ref and list-ref, create vectors and lists of"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; lengths 100,000 and 200,000 elements, and for each,"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; measure the time for 1000 repetitions of accessing the elements"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; at the beginning, 25%, 50% and 75% of the length, and at the end."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; QUESTION: what can you say about how the times for "
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; (vector-ref v index) and (list-ref lst index) "
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; depend on the length of the structure and the index accessed?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"Time"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 10 #"vector-ref"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 7 #"related"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"size"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"its"
0 0 17 3 1 #" "
0 0 17 3 5 #"input"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"i.e"
0 0 17 3 1 #" "
0 0 17 3 11 #"the running"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"time"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 10 #"vector-ref"
0 0 17 3 1 #" "
0 0 17 3 11 #"is constant"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"Time"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 8 #"list-ref"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 8 #"linearly"
0 0 17 3 1 #" "
0 0 17 3 7 #"related"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 4 #"size"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"its"
0 0 17 3 1 #" "
0 0 17 3 5 #"input"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"i.e"
0 0 17 3 1 #" "
0 0 17 3 11 #"the running"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"time"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 10 #"vector-ref"
0 0 17 3 1 #" "
0 0 17 3 9 #"is linear"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 3 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (tr-length lst)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; (ntr-length lst)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; that each take a list lst and return its length."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; tr-length should be implemented using tail recursion"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; ntr-length should be implemented recursively but without"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";            using tail recursion."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; QUESTION: Compare the time taken by the built-in length procedure"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; with the time taken by your tr-length and ntr-length procedures."
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Comment out with semicolons your data and conclusions."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"tr-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"tr-length-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"tr-length-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"tr-length-aux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ntr-length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 8 #"        "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ntr-length"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(time-many-calls 10000"
0 0 17 3 7 #" length"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 15 #"( (build-list '"
0 0 17 3 29 #"(1000000)) ) ) => 0.0008 secs"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(time-many-calls 10000 ntr-length'((build-list '"
0 0 17 3 26 #"(1000000)))) => 0.002 secs"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 74
(
 #"(time-many-calls 10000 ntr-length'((build-list '(1000000)))) => 0.00"
 #"2 secs"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #";=>"
0 0 17 3 1 #" "
0 0 17 3 8 #"built-in"
0 0 17 3 1 #" "
0 0 17 3 6 #"length"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 11 #"the fastest"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Now we turn to sorting a list of elements with respect "
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; to a given comparison operator."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 4 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (insert compare? item lst)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (merge compare? lst1 lst2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; For these procedures, compare? is a comparison procedure"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; for a total ordering of the values item and the elements of lst,"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; or the elements of lst1 and lst2.  For example, for lists of"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; numbers, compare? might be <= or >=.  The procedure compare?"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; takes two arguments and returns #t or #f."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (insert compare? item lst)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; inserts an item into a list lst of items"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; which is sorted with respect to the compare?"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; predicate, so that the resulting list of"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; items is also sorted with respect to the"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; compare? predicate."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; (merge compare? lst1 lst2)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; takes two lists of elements lst1 and lst2, each of which is sorted"
 #" with"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; respect to the compare? predicate, and produces as its result a li"
 #"st"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; of all the items in lst1 and lst2 (preserving duplicates) that is"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; sorted with respect to compare?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";> (insert <= 3 '(1 2 4 5))"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";'(1 2 3 4 5)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (insert string>=? \""
0 0 17 3 5 #"hello"
0 0 17 3 9 #"\" (list \""
0 0 17 3 3 #"the"
0 0 17 3 3 #"\" \""
0 0 17 3 20 #"best\" \"arrangment\"))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'(\""
0 0 17 3 3 #"the"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"hello"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"best"
0 0 17 3 15 #"\" \"arrangment\")"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";> (merge >= '(10 7 4 2 1) '(22 9 5))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";'(22 10 9 7 5 4 2 1)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";> (merge string<=? (list \"a"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 7 #"thought"
0 0 17 3 10 #"\") (list \""
0 0 17 3 4 #"more"
0 0 17 3 16 #"\" \"predictive\"))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'(\""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"more"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 10 #"predictive"
0 0 17 3 12 #"\" \"thought\")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"insert1"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 7 #"insert1"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"merge1"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 8 #"compare?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"merge1"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"merge1"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 43 #";******************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 5 ** (15 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write three procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (divide-list lst)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (isort compare? lst)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (msort compare? lst)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; (divide-list lst) returns a list of two lists,"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; the first of which consists of the first half of the elements of l"
 #"st and"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; the second of which consists of the second half of the elements of"
 #" lst."
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; If lst has an odd number of elements, then the first of the return"
 #"ed"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #"; lists should have one more element than the second."
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; This procedure should run in time that is (in principle) proportio"
 #"nal"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; to the length of lst.  (Please recall what you learned about"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; the running time of length in previous problems.)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; The procedures isort and msort take a total order comparison predi"
 #"cate "
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#"; compare? and a list lst of items, and returns a list of all "
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; the elements in lst (duplicates preserved) arranged so that "
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; they are sorted with respect to compare?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; (isort compare? lst) should use (insert compare? item lst) and"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; should implement insertion sort."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; (msort compare? lst) should use (divide-list lst) and (merge lst1 "
 #"lst2) "
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; and should implement merge sort."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; (divide-list '(a b c d e)) => '((a b c) (d e))"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; (divide-list '(12 3 6 4 9 3 2)) => '((12 3 6 4) (9 3 2))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";> (isort string<=? (list \""
0 0 17 3 10 #"predictive"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"more"
0 0 17 3 13 #"\" \"thought\"))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'(\""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"more"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 10 #"predictive"
0 0 17 3 12 #"\" \"thought\")"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";> (msort string>=? (list \""
0 0 17 3 10 #"predictive"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 1 #"a"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"more"
0 0 17 3 13 #"\" \"thought\"))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'(\""
0 0 17 3 7 #"thought"
0 0 17 3 3 #"\" \""
0 0 17 3 10 #"predictive"
0 0 17 3 3 #"\" \""
0 0 17 3 5 #"novel"
0 0 17 3 3 #"\" \""
0 0 17 3 4 #"more"
0 0 17 3 6 #"\" \"a\")"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"divide-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"halve-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"isort"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 34 #"\"use (insertion-sort lst) instead\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"msort"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 24 #"\"use merge-sort instead\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 6 ** (15 points)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; QUESTION: By using sufficiently long lists of numbers (integer or "
 #"real)"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; and the comparison operation <=,"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; possibly repeating and averaging measurements, "
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; give empirical evidence for the claims that:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; (1) your implementation of insertion sort (isort, above) has best"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; case time Theta(n) and worst case time of Theta(n^2)."
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; (2) your implementation of merge sort (msort, above) has best case"
 #" and"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; worst case times of Theta(n log n)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; QUESTION: Describe the inputs that give best and worst cases for y"
 #"our"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #"; implementations of isort and msort."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; QUESTION: Roughly what is the longest list of random numbers that "
 #"your isort"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; procedure can sort in 10 seconds?  Same question for your msort pr"
 #"ocedure?"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; Because of memory caching and other effects, the timing behaviors "
 #"will not"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; necessarily uniform over the whole range of feasible input lengths"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(1) and (2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        1447 4           0 0           0 240 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 5 #"0.001"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 4 #"0.01"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 4 #"0.03"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 4 #"0.07"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"0.1"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 3 #"0.2"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 14 #"insertion-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 4 #"1.08"
0 0 24 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 2 #"it"
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"hard"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 2 #"ay"
0 0 24 3 1 #" "
0 0 14 3 5 #"given"
0 0 24 3 1 #" "
0 0 14 3 4 #"that"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 7 #"macbook"
0 0 24 3 1 #" "
0 0 14 3 8 #"probably"
0 0 24 3 1 #" "
0 0 14 3 3 #"has"
0 0 24 3 1 #" "
0 0 14 3 6 #"memory"
0 0 24 3 1 #" "
0 0 14 3 6 #"caches"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 1 #" "
0 0 14 3 8 #"effects!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 10 #"merge-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 7 #"0.00046"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 10 #"merge-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 6 #"0.0007"
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 10 #"merge-sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 5 #"0.001"
0 0 24 29 1 #"\n"
0 0 14 3 2 #"=>"
0 0 24 3 1 #" "
0 0 14 3 2 #"it"
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"hard"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 2 #"ay"
0 0 24 3 1 #" "
0 0 14 3 5 #"given"
0 0 24 3 1 #" "
0 0 14 3 4 #"that"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 7 #"macbook"
0 0 24 3 1 #" "
0 0 14 3 8 #"probably"
0 0 24 3 1 #" "
0 0 14 3 3 #"has"
0 0 24 3 1 #" "
0 0 14 3 6 #"memory"
0 0 24 3 1 #" "
0 0 14 3 6 #"caches"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 5 #"other"
0 0 24 3 1 #" "
0 0 14 3 8 #"effects!"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 156
(
 #";ANSWER:if n is the length of a list, then insertion sort has the be"
 #"st case scenario, without talking about frivolous cases, if each of "
 #"the input only needs"
) 0 0 24 29 1 #"\n"
0 0 17 3 3 #";to"
0 0 17 3 1 #" "
0 0 17 3 131
(
 #"be swapped once.  The worst case occurs if each inputs needs to be s"
 #"wapped nearly n times, which means the complexity is n times n."
) 0 0 24 29 1 #"\n"
0 0 17 3 137
(
 #";As for merge sort, the best case scenario is if both lists to merge"
 #" is already sorted.  the worst case occurs if none of them is sorted"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";ANSWER: 2200 for insertion-sort, 90000 for merge sort"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 7 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Write one procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; (visort vec)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; that takes as input a vector vec of numbers and sorts them"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; into increasing order using the algorithm described in"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; pseudo-code in the Wikipedia article on insertion sort"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; (either 2014 version, given in the lecture notes for 2014,"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; or current 2017 version at Wikipedia).  The algorithm"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; needs to be slightly corrected, of course."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";to create a vector: "
0 0 17 3 2 #"> "
0 0 17 3 2 #"#("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #" 3)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Use vector-ref, vector-set! to sort \""
0 0 17 3 2 #"in"
0 0 17 3 15 #" place\" in vec."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; QUESTION: How does the time for visort compare with the times"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; for isort and msort to sort the same inputs (as a vector or list)."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";given an item an a sorted vector, insert the item such that"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; the ist remained ordered"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"insert-vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"vector-append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #") "
0 0 14 3 2 #"vt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"insert-vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vector-drop"
0 0 24 3 1 #" "
0 0 14 3 2 #"vt"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")) ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"random-vector"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"vector"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"vector-append"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"random-vector"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 9         421 4           0 0           0 69 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"insert-item"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 6 #"0.0003"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"insert-item"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-list"
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 6 #"0.0005"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"while...."
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"time-many-calls"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 13 #"insert-vector"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 3 #".05"
0 0 24 3 2 #" ("
0 0 14 3 13 #"random-vector"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 21 3 7 #"0.00002"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 14 3 9 #"insertion"
0 0 24 3 1 #" "
0 0 14 3 2 #"is"
0 0 24 3 1 #" "
0 0 14 3 5 #"about"
0 0 24 3 1 #" "
0 0 14 3 3 #"10x"
0 0 24 3 1 #" "
0 0 14 3 6 #"faster"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 8 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Write one procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; (count-compares sort compare? lst)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; that returns the number of calls to the compare? procedure"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; when we apply the procedure sort to the arguments compare? and lst"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Think of sort as a procedure like msort or isort, taking a compari"
 #"son"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; predicate and a list as its arguments, though sort could"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; be some other sorting procedure devised for testing purposes."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The trick here is to take the compare? procedure and \"wrap\" it"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; in another procedure that will count the number of times it"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; is called.  Then call sort with the \"wrapped\" compare? and lst"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; as inputs.  Finally, return the final count from the \"wrapped\""
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; compare? as the value from count-compares."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Please read about the mutator set! to help you keep the count."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Examples (yours may randomly vary.)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";> (count-compares msort <= (random-list 10))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";23"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";> (count-compares msort <= (random-list 10))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";22"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";> (count-compares isort <= (random-list 10))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";34"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"count-compares"
0 0 24 3 1 #" "
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 8 #"compare?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"done"
0 0 19 3 5 #" yet\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";********* end of hw7, end of hws! **************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
