#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 88 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 32
#"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 64 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 9680 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; CS 201 HW #5 due Wednesday, April 5, 2017 at 11:59 pm, "
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; via the submit system on the Zoo."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Name:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Email address:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Computer science topics: TC-201 assembler and simulator,"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; assembly language programs for sorting two numbers and"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; reading in and printing out a list of numbers in reverse order."
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; ** You may solve the problem using any Racket constructs "
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";  except mutators (set! and its relatives.)  Please do not use requ"
 #"ire."
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#"; ** You may write auxiliary procedure(s) in addition to the one(s) "
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; specified in the problem.  Please include a succint comment for"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; each one specifying its intended inputs and return values."
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; ** Please make your code as clear and readable as possible."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; ** problem 0 ** (1 point)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Modify the following definition to reflect the number of"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; hours you spent on this assignment."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"hours"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; A table is a list of entries, where each entry has two fields: key"
 #" and value."
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; The constructor for entries is entry, the type predicate is entry?"
 #", and the"
) 0 0 24 29 1 #"\n"
0 0 17 3 46 #"; two selectors are entry-key and entry-value."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; We'll start by writing a TC-201 assembler, that is,"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; a procedure that takes a symbolic assembly language"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; program as input and returns as output the corresponding"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; list of 16-bit words representing TC-201 instructions and data."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; As an example, here is a version of the program we wrote in lectur"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; to sum up a zero-terminated sequence of numbers, output the sum, a"
 #"nd halt."
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Note that it initializes sum to 0 before beginning the read loop."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"prog-sum"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"start:"
0 0 24 3 2 #"  "
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 14 3 10 #"constant-0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"next:"
0 0 24 3 4 #"    "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 8 #"skipzero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 4 #"jump"
0 0 24 3 1 #" "
0 0 14 3 7 #"add-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 6 #"output"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 4 #"halt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"add-num:"
0 0 24 3 1 #" "
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"   (         "
0 0 14 3 4 #"jump"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"sum:"
0 0 24 3 5 #"     "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 11 #"constant-0:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Here is the result of assembling this program"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (assemble prog-sum)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 4 #" 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Here are two simpler test programs."
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; First, a program with only instructions, "
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; numeric addresses, and no labels."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"prog1"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"halt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Second, a program with only data statements, three labels, and bot"
 #"h numeric"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; and symbolic data values"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"prog2"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 2 #"x:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"y:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 2 #"-6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"z:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; Here are the values returned by assemble on these two programs."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";> (assemble prog1)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";'((0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";> (assemble prog2)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";'((0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Note the two's complement representation of -6, and"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; the fact that the label y translates to the number 1"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; in this example. How does it not get confused with z = 1????"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; A symbolic assembly-language program is a list of lists, with"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; each list representing one instruction or data statement."
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; An instruction or data statement may optionally have a label,"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; that is, a symbol ending in colon (:), which is the first"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; element of the list.  The next symbol must be one of the"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; opcodes (in the table opcode-table, below) or the symbol 'data."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; For the opcodes load, store, add, sub, jump, loadi, storei,"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; there is one more field, the address field, which may be "
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; a label (defined somewhere in the program) or a "
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; decimal number between 0 and 4095 inclusive."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; For the other opcodes, there is no additional field."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; For the data directive, there is one more field, the"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; value, which may be a label (defined somewhere in the"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; program) or a decimal number between -32768 and 32767"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; inclusive."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; ** problem 1 ** (9 points)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Write a procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (symbol-table prog)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; that takes a symbolic assembly-language program prog"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; as input, and returns a table with entries listing"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; (in order) the labels defined in the program and their"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; corresponding numeric values (instructions and data"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; statements are numbered from 0.)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Note that when they are defined, the labels have a colon (:)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; at the end, and when they are in the symbol table the"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; final colon is removed."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; You will probably want to write one or more auxiliary"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; procedures to deal with labels.  The procedures"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; symbol->string, string->symbol, string-length, string-ref"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; and substring will be useful, together with character representati"
 #"ons."
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #"; (See the Racket documentation.)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (symbol-table prog1)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"prog3"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 2 #"x:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"y:"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 2 #"-6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (symbol-table prog2)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(list (entry 'x 0) (entry 'y 1) (entry 'z 2))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";> (symbol-table prog-sum)"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";(list (entry 'start 0) (entry 'next 2) (entry 'add-num 8) (entry 's"
 #"um 11) (entry 'constant-0 12))"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"symbol-table"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-aux"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 2 #" ("
0 0 14 3 26 #"entry-key-for-symbol-table"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"incr"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 17 3 70
(
 #"; list allows cons to works cuz cons needs the second arg to be a li"
 #"st"
) 0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-aux"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 2 #" ("
0 0 14 3 26 #"entry-key-for-symbol-table"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #"))) ("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         229 4           0 0           0 37 0 24 3 1 #"("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 1 #" "
0 0 14 3 5 #"prog3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"x:"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 17 #"symbol-table-incr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"y:"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";given"
0 0 17 3 82
(
 #" a list element, check to see if it ends with a colon (:) and theref"
 #"ore is a lable"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-aux"
0 0 24 3 1 #" "
0 0 14 3 8 #"list-ele"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"list-ele"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 10 #"string-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\:"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";given a symbol from the assembly-language program, take out the col"
 #"on (:) at the end"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"entry-key-for-symbol-table"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-trim"
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #") "
0 0 19 3 3 #"\":\""
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Next we look at converting between decimal numbers and"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; lists of binary digits representing integers in unsigned"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; binary and two's complement representations."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 2 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write four procedures:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; (bin->n lst)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; takes a list of binary digits and returns the nonnegative"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; integer that they represent in unsigned binary in base 2."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; (tc->n lst)"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; takes a list of k binary digits and returns the negative, zero, or"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; positive number that they represent in k-bit two's complement repr"
 #"esentation."
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #"; You may assume k is at least 2."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (n->bin n len)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; takes a nonnegative integer n and returns a list of len binary dig"
 #"its"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; representing n in unsigned binary.  If necessary, the representati"
 #"on "
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; is padded on the left with 0's.  If the number n cannot be represe"
 #"nted"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; correctly in unsigned binary using len bits, the symbol 'error is "
 #"returned."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (n->tc n len)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; If the negative, zero, or positive integer n can be correctly repr"
 #"esented"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; in two's complement binary representation with len bits, a list of"
 #" binary digits"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; giving that representation is returned.  Otherwise, the symbol 'er"
 #"ror is returned."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";> (bin->n '(0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";3"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";> (bin->n '(1 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";31"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (tc->n '(0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";3"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";> (tc->n '(1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";-3"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";> (tc->n '(1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";-7"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";> (n->bin 13 5)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";'(0 1 1 0 1)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";> (n->bin 13 3)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";'error"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";> (n->tc 13 16)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";'(0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";> (n->tc -6 16)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";'(1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";> (n->tc 17 4)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";'error"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"bin->n-incr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; incr = base"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bin->n-incr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"bin->n-aux"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"incr"
0 0 24 3 3 #") ("
0 0 14 3 11 #"bin->n-incr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"incr"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";given a number and base, return a number to be added to the calcula"
 #"tion of bin->n functio "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"bin->n-aux"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"base"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 11 #"num-of-bits"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"pos-max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 11 #"num-of-bits"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 7 #"pos-max"
0 0 24 3 3 #") ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")    "
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"turn-n-neg"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"reverse-bin-n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";given a list of binary number, switch 1 to 0 and vice versa, then r"
 #"eturn it"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"reverse-bin-n"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"reverse-bin-digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"reverse-bin-n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 58
#";given a single binary digit, switch 1 to 0 and vice versa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"reverse-bin-digit"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; turn a number to its negative self"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"turn-n-neg"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"n->bin"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 5 #"bin-n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 15 #"n->bin-reversed"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 14 #"n-padded-zeros"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"bin-n"
0 0 24 3 5 #")))) "
0 0 17 3 51 #"; if zero, add no padded zero; if > 0, return error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 14 #"n-padded-zeros"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 5 #"bin-n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 14 #"n-padded-zeros"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 14 3 14 #"n-padded-zeros"
0 0 24 3 3 #" ) "
0 0 14 3 5 #"bin-n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";given a decimal, return the reversed (orderly) binary equivalent: h"
 #"ttp://www.wikihow.com/Convert-from-Decimal-to-Binary"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"n->bin-reversed"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 15 #"n->bin-reversed"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 7 #") )))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; given n, create a list of zeros whose length = n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"n->tc"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bound?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"n->bin"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"reverse-bin-n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"n->bin"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 10 #"turn-n-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";given a number and a len, which is effectively the base, determine "
 #"if error (#f) or not"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bound?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 11 #"upper-bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"lower-bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 11 #"upper-bound"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 11 #"upper-bound"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"lower-bound"
0 0 24 3 3 #") ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"upper-bound"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";given a number, turn it positive"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"turn-n-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"n->tc"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 4 #" 16)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Now we create a procedure to assemble one"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; line of a program (given the symbol table), and use that"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; to assemble the whole program."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 3 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Write two procedures:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; (assemble-one line table)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; takes one line (instruction or data statement) from a program"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; and a symbol table for the program"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; and returns a list of 16 bits representing that line of the progra"
 #"m."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; (assemble prog)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; takes a symbolic assembly-language program prog and returns"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; a list of 16-bit lists, one for each line of the program, giving"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; the machine language version of the program."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Here is a useful table of the TC-201 opcodes and their"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; corresponding 4-bit representations."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-table"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"halt"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"input"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"output"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"jump"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skipzero"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"skippos"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"skiperr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"loadi"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"storei"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assemble-one"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 17 3 34 #"; line = list ;(symbol-table prog)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 12 #"opcode-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"label-aux"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")) "
0 0 14 3 12 #"opcode-table"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 27 #"))                         "
0 0 17 3 44 #";if first element in the assembly is a label"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 12 #"opcode-table"
0 0 24 3 3 #") ("
0 0 14 3 5 #"n->tc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 81
(
 #"                                                                    "
 #"            ("
) 0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 12 #"opcode-table"
0 0 24 3 3 #") ("
0 0 14 3 6 #"n->bin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 8 #")))))   "
0 0 17 3 24 #"; else if it's an opcode"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"n->tc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 2 #"16"
0 0 24 3 38 #")                                     "
0 0 17 3 25 #"; if the data is a number"
0 0 24 29 1 #"\n"
0 0 24 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 14 3 6 #"n->bin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 13 #"))           "
0 0 17 3 49 #"; if the data is a symbol that references a label"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")) "
0 0 14 3 12 #"opcode-table"
0 0 24 3 3 #") ("
0 0 14 3 5 #"n->tc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 76
(
 #"                                                                    "
 #"       ("
) 0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 3 #")) "
0 0 14 3 12 #"opcode-table"
0 0 24 3 3 #") ("
0 0 14 3 6 #"n->bin"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 4 #"line"
0 0 24 3 2 #") "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                 )))))"
0 0 24 29 1 #"\n"
0 0 24 3 88
(
 #"                                                                    "
 #"                    "
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"assemble-one"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 4 #"sum:"
0 0 17 3 1 #" "
0 0 17 3 4 #"data"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"start"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"sum"
0 0 17 3 19 #" 2)))              "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"start:"
0 0 17 3 2 #"  "
0 0 17 3 4 #"load"
0 0 17 3 12 #" constant-0)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"start"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"next"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 2 #" '"
0 0 17 3 7 #"add-num"
0 0 17 3 1 #" "
0 0 17 3 1 #"8"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"sum"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 15 #"constant-0 12))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";given a symbol, check its match (a key) in a table of entries and r"
 #"eturn the key's value"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 34 #"invalid-instruction/data-from-line"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"entry-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 15 #"opcode-bin-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assemble"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"assemble-aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 2 #" ("
0 0 14 3 12 #"symbol-table"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assemble-aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 12 #"symbol-table"
0 0 24 3 2 #") "
0 0 17 3 94
(
 #"; needed because prog changes over the course of recursion, but the "
 #"its symbol-table shouldn't"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assemble-one"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 2 #") "
0 0 14 3 12 #"symbol-table"
0 0 24 3 3 #") ("
0 0 14 3 12 #"assemble-aux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 2 #") "
0 0 14 3 12 #"symbol-table"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"foo"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 6 #"start:"
0 0 24 3 2 #"  "
0 0 14 3 4 #"load"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"    (         "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"   ("
0 0 17 3 5 #"next:"
0 0 17 3 10 #"    input)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 22 #"   (         skipzero)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"   (         "
0 0 17 3 4 #"jump"
0 0 17 3 9 #" add-num)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"   (         "
0 0 17 3 4 #"load"
0 0 17 3 5 #" sum)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"   (         output)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 18 #"   (         halt)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"   ("
0 0 17 3 8 #"add-num:"
0 0 17 3 1 #" "
0 0 17 3 3 #"add"
0 0 17 3 5 #" sum)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"   (         "
0 0 17 3 5 #"store"
0 0 17 3 5 #" sum)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"   (         "
0 0 17 3 4 #"jump"
0 0 17 3 6 #" next)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"sum:"
0 0 24 3 5 #"     "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 2 #";("
0 0 17 3 11 #"constant-0:"
0 0 17 3 1 #" "
0 0 17 3 4 #"data"
0 0 17 3 5 #" 0)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 12 #"symbol-table"
0 0 17 3 1 #" "
0 0 17 3 3 #"foo"
0 0 17 3 2 #") "
0 0 17 3 2 #"=>"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"start"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #") ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"sum"
0 0 17 3 4 #" 2))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"1"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 1 #" "
0 0 17 3 3 #"foo"
0 0 17 3 2 #" ("
0 0 17 3 12 #"symbol-table"
0 0 17 3 7 #" foo) )"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"CONS"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-one"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 4 #"prog"
0 0 17 3 2 #") "
0 0 17 3 12 #"symbol-table"
0 0 17 3 3 #") ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 4 #"prog"
0 0 17 3 16 #") symbol-table))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"        "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 3 #" 1)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 49 #"                                                 "
0 0 17 3 1 #"2"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 5 #"store"
0 0 17 3 1 #" "
0 0 17 3 3 #"sum"
0 0 17 3 3 #") ("
0 0 17 3 4 #"sum:"
0 0 17 3 1 #" "
0 0 17 3 4 #"data"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 16 #")) symbol-table)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 52 #"                                                   ("
0 0 17 3 4 #"CONS"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-one"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 5 #"store"
0 0 17 3 1 #" "
0 0 17 3 3 #"sum"
0 0 17 3 2 #") "
0 0 17 3 12 #"symbol-table"
0 0 17 3 3 #") ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 4 #"prog"
0 0 17 3 16 #") symbol-table))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 57 #"                                                         "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 3 #" 0)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 98
(
 #"                                                                    "
 #"                              "
) 0 0 17 3 1 #"3"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 4 #"sum:"
0 0 17 3 1 #" "
0 0 17 3 4 #"data"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 16 #")) symbol-table)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 101
(
 #"                                                                    "
 #"                                ("
) 0 0 17 3 4 #"CONS"
0 0 17 3 2 #" ("
0 0 17 3 12 #"assemble-one"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 4 #"sum:"
0 0 17 3 1 #" "
0 0 17 3 4 #"data"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #") "
0 0 17 3 12 #"symbol-table"
0 0 17 3 3 #") ("
0 0 17 3 12 #"assemble-aux"
0 0 17 3 2 #" ("
0 0 17 3 4 #"rest"
0 0 17 3 1 #" "
0 0 17 3 4 #"prog"
0 0 17 3 116
(
 #") symbol-table))                                                    "
 #"                                                "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Now that we can produce machine language from symbolic assembly-la"
 #"nguage"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; programs, we'll create a simulator that can execute the machine"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; language instructions step by step.  First, we specify a represent"
 #"ation of"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; of the random access memory (RAM) and procedures to read"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; and write it."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Random access memory (RAM)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; The contents of RAM are represented by a table"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; in which the key is a nonnegative integer in the range"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; 0 through 4095 (the memory address), and the value is a list of 16"
 #" bits"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #"; (the bits stored by the register with that address.)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; No address may appear twice.  The contents of any register"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; whose address does not appear as a key is assumed to contain 16 ze"
 #"roes."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 4 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write three procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (ram-read address ram)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; takes a memory address and a ram"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; and returns a list of 16 bits giving the contents"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; of the memory register in ram with the given address."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (ram-write address contents ram)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; takes a memory address (address), a list of 16 bits (contents) and"
 #" a ram,"
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#"; and returns a ram representing the result of copying the contents "
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; into the memory register of ram specified by the memory address."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (equal-rams? ram1 ram2)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; takes two rams and compares their contents, returning"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; #t if they are equal and #f if they are unequal."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";> (ram-read 0 ram1)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";'(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";> (ram-read 2 ram2)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";'(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";> (ram-write 5 '(1 1 0 0  0 0 1 1  1 1 0 0  0 0 1 1) ram2)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(list"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 4 #" 0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 4 #" 1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 4 #" 1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 4 #" 0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 5 #" 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";> (ram-write 10 '(1 1 1 1  1 1 1 1  1 1 1 1  1 1 1 1) ram3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(list"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 0 '(1 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 1 '(1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 2 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 5 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (entry 7 '(1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; (entry 10 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";> (equal-rams? ram1 ram2)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";> (equal-rams? ram2 ram3)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   (("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 34 #"no-such-address-exists-in-this-ram"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 5 #"))) ("
0 0 14 3 11 #"entry-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ram-write"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"address-exist?"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 3 #") ("
0 0 14 3 10 #"edit-table"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";given a number/address, see if that exists in ram already"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"address-exist?"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 14 #"address-exist?"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 6 #")) )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";special version of map procedure that edit the ram by modifying the"
 #" entry whose address = number"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"edit-table"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"modify-entry"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"edit-table"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #") "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; given a entry (lst), change the value of the entry if entry's key "
 #"= number"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"modify-entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-key"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 6 #"number"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"modified-entry"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 6 #"]))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 14 #"modified-entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 14 #"modified-entry"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 22 #"somehow-ram-is-false!?"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"equal-rams?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 30 #"address-exist-n-content-match?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 3 2 #") "
0 0 14 3 4 #"ram2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"equal-rams?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 3 2 #") "
0 0 14 3 4 #"ram2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";given a register (which is an entry) and a ram, search for"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";that"
0 0 17 3 1 #" "
0 0 17 3 5 #"entry"
0 0 17 3 1 #"'"
0 0 17 3 1 #"s"
0 0 17 3 1 #" "
0 0 17 3 3 #"key"
0 0 17 3 2 #" ("
0 0 17 3 7 #"address"
0 0 17 3 2 #") "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 3 #"ram"
0 0 17 3 2 #" ("
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 4 #"fail"
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 1 #" "
0 0 17 3 5 #"false"
0 0 17 3 2 #") "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 3 #"see"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 2 #"it"
0 0 17 3 1 #" "
0 0 17 3 7 #"matches"
0 0 17 3 1 #" "
0 0 17 3 8 #"with the"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; entry's value aka"
0 0 17 3 1 #" "
0 0 17 3 3 #"ram"
0 0 17 3 1 #" "
0 0 17 3 5 #"slot "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 4 #"the "
0 0 17 3 4 #"same"
0 0 17 3 1 #" "
0 0 17 3 9 #"address ("
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 7 #" false)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"address-exist-n-content-match?"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"entry-key"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 3 #") ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"entry-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 3 #") ("
0 0 14 3 11 #"entry-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 14 3 30 #"address-exist-n-content-match?"
0 0 24 3 1 #" "
0 0 14 3 8 #"register"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 32 #")))))                           "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(address-exist-n-content-match?"
0 0 17 3 2 #" ("
0 0 17 3 5 #"entry"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #"  "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #"  "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 2 #" 0"
0 0 17 3 1 #" "
0 0 17 3 3 #"0  "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 8 #")) ram1)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(equal-rams? "
0 0 17 3 10 #"ram1 ram2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; For the TC-201 Central Processing Unit (CPU), "
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; the contents of the registers are represented by a struct with 4 f"
 #"ields "
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; giving the values of the CPU registers:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; the accumulator (acc)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; the program counter (pc)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; the run flag (rf)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; the arithmetic error bit (aeb)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"cpu"
0 0 24 3 2 #" ("
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 2 #"rf"
0 0 24 3 1 #" "
0 0 14 3 3 #"aeb"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Each field contains a list of bits of the correct length"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; giving the value of the corresponding register; 16 bits for"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; the acc, 12 bits for the pc, 1 bit each for the rf and the aeb."
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; The constructor is cpu, the type predicate is cpu?, and"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; the selectors are cpu-acc, cpu-pc, cpu-rf, cpu-aeb."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The accumulator has value 15, the program counter has value 7,"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; the run flag is 1 and the arithmetic error bit is 0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"cpu1"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cpu"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; The accumulator has value -3, the program counter has value 7,"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; the run flag is 1 and the arithmetic error bit is 1."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"cpu2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cpu"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; A configuration of the TC-201 is a struct with two fields:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; (1) the contents of the CPU registers, in the above format, and"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; (2) the contents of the RAM, in the format of problem 4."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; Note that the constructor is conf, the type-predicate"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; is conf?, and the selectors are conf-cpu, conf-ram."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 5 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write three procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (equal-configs? config1 config2)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; takes two configurations config1 and config2, and returns"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; #t if they represent the same contents of the RAM and the CPU regi"
 #"sters,"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; and returns #f otherwise."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (addr->pc addr config)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; takes a configuration and a memory address addr (a number"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; in the range 0 to 4095 inclusive), and returns a new configuration"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; in which the program counter is set to the given address."
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; No other registers are changed."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (add-to-pc n config)"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; takes a nonnegative integer n and a TC-201 configuration config"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; and returns the TC-201 configuration that is obtained by adding n "
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; to the value of pc.  Note that the sum should be taken modulo 4096"
 #".  MODULO"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (Racket has a modulo procedure.)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Example configurations"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"config1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 4 #"cpu1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"config2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 4 #"cpu1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"config3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 4 #"cpu2"
0 0 24 3 1 #" "
0 0 14 3 4 #"ram2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Examples of procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";> (equal-configs? config1 config2)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#t"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";> (equal-configs? config2 config3)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";#f"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (addr->pc 5 config1)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1) '(0 0 0 0 0 0 0 0 0 1 0 1)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 2 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (addr->pc 1 config3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1) '(0 0 0 0 0 0 0 0 0 0 0 1)"
 #" '(1) '(1))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";> (add-to-pc 1 config2)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1) '(0 0 0 0 0 0 0 0 1 0 0 0)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";> (add-to-pc 4093 config1)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1) '(0 0 0 0 0 0 0 0 0 1 0 0)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 2 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"equal-configs?"
0 0 24 3 1 #" "
0 0 14 3 7 #"config1"
0 0 24 3 1 #" "
0 0 14 3 7 #"config2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"config1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"config2"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"equal-rams?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 7 #"config1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 7 #"config2"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"addr->pc"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"bin-addr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"n->bin"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 15 #"addr->pc-in-cpu"
0 0 24 3 1 #" "
0 0 14 3 8 #"bin-addr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 17 3 31 #"; return a cpu with modified pc"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";given an addr and a cpu, change the content of the cp of the cpu to"
 #" said addr, return the cpu"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"addr->pc-in-cpu"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 18 #"modified-pc-of-cpu"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 2 #" ["
0 0 14 3 2 #"pc"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 6 #"]))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 18 #"modified-pc-of-cpu"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 18 #"modified-pc-of-cpu"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"check-cepu-proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 16 #"bin-pc-of-config"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cpu-pc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))) "
0 0 17 3 51 #"; find the config's cpu's pc and turn it to decimal"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"added-pc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 16 #"bin-pc-of-config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"addr->pc"
0 0 24 3 1 #" "
0 0 14 3 8 #"added-pc"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"addr->pc"
0 0 24 3 1 #" "
0 0 14 3 8 #"added-pc"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 5 #" ))) "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 6 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (acc->mem addr config)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; takes a memory address and a configuration, and"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; returns the configuration in which the contents of the accumulator"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; are copied to the addressed memory register."
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; No other registers change value."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; (mem->acc addr config)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; that takes a memory address and a configuration, and"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; returns the configuration in which the contents of the addressed"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; memory register are copied to the accumulator."
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; No other registers change value."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (acc->mem 3 config1)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1) '(0 0 0 0 0 0 0 0 0 1 1 1)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 2 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";> (acc->mem 13 config3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1) '(0 0 0 0 0 0 0 0 0 1 1 1)"
 #" '(1) '(1))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  (entry 13 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";> (mem->acc 4 config1)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1) '(0 0 0 0 0 0 0 0 0 1 1 1)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 2 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";> (mem->acc 12 config3)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) '(0 0 0 0 0 0 0 0 0 1 1 1)"
 #" '(1) '(1))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 4 '(0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 3 '(1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"acc->mem"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 12 #"acc-contents"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"curr-ram"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"new-ram"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ram-write"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 12 #"acc-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"curr-ram"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ram"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-ram"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; 1) get the content of an accumulator:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"cpu-acc"
0 0 17 3 2 #" ("
0 0 17 3 8 #"conf-cpu"
0 0 17 3 15 #" config))      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #"; 2) given a ram, an address, and acc content, make the addressed re"
 #"gister hold the acc content. return the modified ram"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";(ram-write "
0 0 17 3 7 #"address"
0 0 17 3 1 #" "
0 0 17 3 8 #"contents"
0 0 17 3 5 #" ram)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #";make the modified ram the ram of the configure, which is to say cre"
 #"ate a modified one.  remember that if an original"
) 0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; ram has no address like the one specified by acc-mem, the ram-writ"
 #"e function will write in a new register with said address."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"mem->acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 12 #"mem-contents"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-acc-contents"
0 0 24 3 1 #" "
0 0 14 3 12 #"mem-contents"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";given a new content for acc and a cpu, change the content of the ac"
 #"c of the cpu to new content, return the cpu"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-acc-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 2 #" ["
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 6 #"]))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cepu"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"check-cepu-proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 7 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (sum tc1 tc2)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; takes two lists of bits, tc1 and tc2, of the same length, k,"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; representing two numbers in k-bit two's complement,"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; and returns two values, in a list."
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; If the sum of the two numbers can be correctly represented in k-bi"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; two's complement, then the first value in the list is #t and the s"
 #"econd"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; value is the k-bit two's complement representation of the sum."
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; If the sum of the two numbers cannot be correctly represented in k"
 #"-bit"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; two's complement, then the first value in the list is #f and the"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; second value is a list of k zeroes."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (diff tc1 tc2)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; is analogous to (sum tc1 tc2), except that, instead of the"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; sum of the numbers represented by tc1 and tc2, the value"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; computed is their difference, that is, the number represented"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; by tc1 minus the number represented by tc2."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; The format of the result is the same: a list with #t and the"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; k-bit two's complement representation of the difference, or"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; #f and a list of k zeroes."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; For both procedures, you may assume that tc1 and tc2 are "
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; lists of bits of equal length, and that the length is at least 2."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; 3 + 2 = 5, correctly representable in two's complement with 4 bits"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";>  (sum '(0 0 1 1) '(0 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#t (0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; -3 + 2 = -1, correctly representable in two's complement with 4 bi"
 #"ts"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";> (sum '(1 1 0 1) '(0 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#t (1 1 1 1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; -5 + 5 = 0, correctly representable in two's complement with 16 bi"
 #"ts"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";> (sum '(1 1 1 1  1 1 1 1  1 1 1 1  1 0 1 1) '(0 0 0 0  0 0 0 0  0 "
 #"0 0 0  0 1 0 1))"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";'(#t (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; 4 + 4 = 8, which is not correctly representable in two's complemen"
 #"t with 4 bits"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";> (sum '(0 1 0 0) '(0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#f (0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; 3 - 2 = 1, correctly representable in two's complement with 4 bits"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";>  (diff '(0 0 1 1) '(0 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#t (0 0 0 1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; 3 - 5 = -2, correctly representable in two's complement with 4 bit"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";>  (diff '(0 0 1 1) '(0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#t (1 1 1 0))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; 3 - (-6) = 9, which is not correctly representable in two's comple"
 #"ment with 4 bits"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";> (diff '(0 0 1 1) '(1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";'(#f (0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 3 #"len"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"n->tc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"tc->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc2"
0 0 24 3 3 #")) "
0 0 14 3 3 #"len"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";get the length of tc and see if the sum of tc1 (turn dec) and tc2 ("
 #"turn dec) can be rep using length of tc."
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#"; if length works, return true and sum.  if not, return false"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"diff"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 3 #"len"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"n->tc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"tc->n"
0 0 24 3 1 #" "
0 0 14 3 3 #"tc2"
0 0 24 3 3 #")) "
0 0 14 3 3 #"len"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 23 #"sum-reprable-using-len?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 8 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Write two procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (do-input config)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; (do-output config)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; Each takes a TC-201 configuration and performs the appropriate act"
 #"ion "
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; (reading a number from the user or writing a number out to the use"
 #"r)"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#"; AND ALSO **RETURNS** THE RESULTING TC-201 CONFIGURATION."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; For input, the new configuration has the value read in the "
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; accumulator, and all other registers unchanged."
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; To read in a value, you may use the following let construct:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; (let ((value (begin (display \""
0 0 17 3 25 #"input = \") (read)))) ...)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          49 4           0 0           0 7 0 14 3 3 #"use"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 15 3 6 #"begin:"
0 0 24 29 1 #"\n"
0 0 14 3 61
#"http://stackoverflow.com/questions/29382733/racket-begin-form"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; If the number provided by the user is not representable"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; in two's complement with 16 bits, the returned value should"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; be the symbol 'error instead of a new configuration."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; For output, the new configuration is returned UNCHANGED. "
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; If the integer value from the accumulator is in "
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; value-from-accumulator, then the output to the user can be "
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; produced by:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; (display \""
0 0 17 3 7 #"output "
0 0 17 3 4 #"= \")"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; (display value-from-accumulator)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; The lines input = .. and output = .. show the interaction between "
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; TC-201 and user.  The TC-201 configuration shows the value"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; returned by the procedure.  This assumes init-config is working."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";> (do-input (init-config '()))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";input = 14"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";(conf (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0) '(0 0 0 0 0 0 0 0 0 0"
 #" 0 0) '(1) '(0)) '())"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";> (do-output (do-input (init-config '())))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";input = -34"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";output = -34"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";(conf (cpu '(1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0) '(0 0 0 0 0 0 0 0 0 0"
 #" 0 0) '(1) '(0)) '())"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         223 4           0 0           0 36 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Type a number: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Twice your number is \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"newline"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";given a new content for acc and a cpu, change the content of the ac"
 #"c of the cpu to ew content, return the cpu"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"do-input"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    ( ("
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"input = \""
0 0 24 3 3 #") ("
0 0 14 3 4 #"read"
0 0 24 3 5 #"))) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 5 #"n->tc"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 16 #"input-too-large!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 12 #"value-in-bin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"n->tc"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-acc-contents"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-in-bin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 7 #")) ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"do-output"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 22 #"value-from-accumulator"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 6 #")))) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 10 #"output = \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 22 #"value-from-accumulator"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 6 #"config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; ** problem 9 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Write one procedure"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; (next-config config)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; that takes a TC-201 configuration and returns the next TC-201 conf"
 #"iguration,"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #"; after one iteration of the fetch/execute cycle."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; If the run flag (rf) is 0, then the configuration config is return"
 #"ed unchanged,"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #"; because the machine is halted."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; The instructions that should be implemented are:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; halt, load, store, add, sub, input, output, jump"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; skipzero, skippos, skiperr, loadi, storei."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; These are opcodes 0000 through 1100, respectively."
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; You should intepret an undefined opcode  (1101 through 1111) "
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; as a halt instruction."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; For a halt instruction, in the returned configuration "
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; the run flag is 0 and all other registers are unchanged."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; Otherwise, the program counter (pc) contains a memory address, and"
 #" the TC-201 "
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; instruction at that location is fetched and executed, and the resu"
 #"lting "
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; configuration is returned.  Note that all instructions result in a"
 #" configuration"
) 0 0 24 29 1 #"\n"
0 0 17 3 45 #"; being returned, INCLUDING input and output."
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         679 4           0 0           0 112 0 24 3 1 #"("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"read"
0 0 24 3 1 #" "
0 0 14 3 4 #"from"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"ram-write"
0 0 24 3 1 #" "
0 0 14 3 7 #"address"
0 0 24 3 1 #" "
0 0 14 3 7 #"content"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"write"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 3 #"ram"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"functions"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 3 #"NEW"
0 0 24 3 1 #" "
0 0 14 3 7 #"CONFIGs"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"halt"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"addr->pc"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"jump"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"skipzero"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 7 #"skippos"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 8 #"skipperr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"acc->mem"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"mem->acc"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 4 #"load"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"do-input"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"do-output"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";get"
0 0 17 3 1 #" "
0 0 17 3 7 #"content"
0 0 17 3 1 #" "
0 0 17 3 5 #"of pc"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";'"
0 0 17 3 1 #"("
0 0 17 3 6 #"cpu-pc"
0 0 17 3 2 #" ("
0 0 17 3 8 #"conf-cpu"
0 0 17 3 9 #" config))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #";given a content of the pc, go to that memory location, and return t"
 #"he memory content of addressed register"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";(ram-read ("
0 0 17 3 6 #"bin->n"
0 0 17 3 1 #" "
0 0 17 3 7 #"address"
0 0 17 3 6 #") ram)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";cross check first four digits of with opcode-table (first 4 digits "
 #"of register),"
) 0 0 24 29 1 #"\n"
0 0 17 3 4 #";and"
0 0 17 3 1 #" "
0 0 17 3 6 #"return"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 9 #"entry-key"
0 0 17 3 1 #" "
0 0 17 3 21 #"aka alphabetic-opcode"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"opcode-inst"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 34 #"invalid-instruction/data-from-line"
0 0 24 3 1 #")"
0 0 17 3 48 #"; revise so that data statement is also executed"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 11 #"entry-value"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"entry-key"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 11 #"opcode-inst"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";given new-content and config, make new-content the content of the a"
 #"ccumulator,then return the config"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"value->acc"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-content"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-acc-contents"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-content"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";given a number and config, make the number the content of the aeb, "
 #"then return the config"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"value->aeb"
0 0 24 3 1 #" "
0 0 14 3 11 #"number-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-aeb-contents"
0 0 24 3 1 #" "
0 0 14 3 11 #"number-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-aeb-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 2 #" ["
0 0 14 3 3 #"aeb"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 6 #"]))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cepu"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"check-cepu-proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";given a number and config, make the number the content of the rf, t"
 #"hen return the config"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"value->rf"
0 0 24 3 1 #" "
0 0 14 3 11 #"number-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 18 #"change-rf-contents"
0 0 24 3 1 #" "
0 0 14 3 11 #"number-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"change-rf-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 4 #"cepu"
0 0 24 3 2 #" ["
0 0 14 3 2 #"rf"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 6 #"]))) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cepu"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 8 #"new-cepu"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"check-cepu-proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";loadi function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"loadi"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 12 #"mem-contents"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 17 3 66
#";  read from memory the contents of the register with address addr"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 29 #"righ-most-12-bits-of-contents"
0 0 24 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 12 #"mem-contents"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")) "
0 0 17 3 68
#"; take the rightmost 12 bits of that as another address, addr-delta."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"addr-delta"
0 0 24 3 1 #" "
0 0 14 3 29 #"righ-most-12-bits-of-contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"mem-contents-delta"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 10 #"addr-delta"
0 0 24 3 3 #") ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 17 3 85
(
 #"; Copy the contents of the memory register with address addr-delta t"
 #"o the accumulator"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"new-cpu"
0 0 24 3 2 #" ("
0 0 14 3 19 #"change-acc-contents"
0 0 24 3 1 #" "
0 0 14 3 18 #"mem-contents-delta"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-cpu"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";storei function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"storei"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" ( ("
0 0 14 3 12 #"mem-contents"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 4 #"addr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 17 3 64
#";read from memory the contents of the register with address addr"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 29 #"righ-most-12-bits-of-contents"
0 0 24 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 12 #"mem-contents"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))  "
0 0 17 3 5 #";take"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 9 #"rightmost"
0 0 17 3 1 #" "
0 0 17 3 2 #"12"
0 0 17 3 1 #" "
0 0 17 3 4 #"bits"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 2 #"as"
0 0 17 3 1 #" "
0 0 17 3 7 #"another"
0 0 17 3 1 #" "
0 0 17 3 7 #"address"
0 0 17 3 1 #","
0 0 17 3 87
(
 #" addr'  Copy the contents of the accumulator to the memory register "
 #"with address addr'."
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"addr-delta"
0 0 24 3 1 #" "
0 0 14 3 29 #"righ-most-12-bits-of-contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"acc-contents"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"curr-ram"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"new-ram"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ram-write"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 10 #"addr-delta"
0 0 24 3 2 #") "
0 0 14 3 12 #"acc-contents"
0 0 24 3 1 #" "
0 0 14 3 8 #"curr-ram"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 11 #"struct-copy"
0 0 24 3 1 #" "
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ram"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-ram"
0 0 24 3 5 #"])) )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-config"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 14 3 10 #"new-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-config"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"next-config"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cpu-rf"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"config"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 16 #"counter-contents"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cpu-pc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 17 3 77
(
 #"; get the content of the program counter, which helps us know where "
 #"in RAM to"
) 0 0 17 3 1 #" "
0 0 17 3 5 #"go to"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 17 #"register-contents"
0 0 24 3 2 #" ("
0 0 14 3 8 #"ram-read"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 16 #"counter-contents"
0 0 24 3 3 #") ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 17 3 50 #"; go to that RAM location and read content from it"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"opcode-bits"
0 0 24 3 2 #" ("
0 0 14 3 4 #"take"
0 0 24 3 1 #" "
0 0 14 3 17 #"register-contents"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"rem-12-bits"
0 0 24 3 2 #" ("
0 0 14 3 4 #"drop"
0 0 24 3 1 #" "
0 0 14 3 17 #"register-contents"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 2 #" ("
0 0 14 3 11 #"opcode-inst"
0 0 24 3 1 #" "
0 0 14 3 11 #"opcode-bits"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-table"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 2 #" ("
0 0 14 3 6 #"bin->n"
0 0 24 3 1 #" "
0 0 14 3 11 #"rem-12-bits"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"jump"
0 0 24 3 3 #") ("
0 0 14 3 8 #"addr->pc"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"skipzero"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"skippos"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"skiperr"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 5 #"tc->n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-aeb"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #") ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"load"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 8 #"mem->acc"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 8 #"acc->mem"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"input"
0 0 24 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 8 #"do-input"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"output"
0 0 24 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 9 #"do-output"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 14 #"added-1-config"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 9 #"value->rf"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 41 #")))                                      "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 10 #"value->acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ("
0 0 14 3 21 #"config-with-blank-acc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"value->aeb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"config"
0 0 24 3 6 #")) ) ("
0 0 14 3 10 #"value->acc"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 14 3 21 #"config-with-blank-acc"
0 0 24 3 7 #")) ))) "
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                         ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"diff"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 10 #"value->acc"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 4 #"diff"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cpu-acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"ram-read"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-ram"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 5 #")))) "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 15 3 3 #"let"
0 0 24 3 4 #" ( ("
0 0 14 3 21 #"config-with-blank-acc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"value->aeb"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"config"
0 0 24 3 6 #")) ) ("
0 0 14 3 10 #"value->acc"
0 0 24 3 2 #" ("
0 0 14 3 17 #"add-padding-zeros"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 14 3 21 #"config-with-blank-acc"
0 0 24 3 7 #")) ))) "
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"loadi"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                          ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 5 #"loadi"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"storei"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                          ( ("
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 2 #" ("
0 0 14 3 6 #"storei"
0 0 24 3 1 #" "
0 0 14 3 18 #"12-bits-in-decimal"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #")) )"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"add-to-pc"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"modded-acc-config"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"opcode-alpha"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"halt"
0 0 24 3 3 #") ("
0 0 14 3 9 #"value->rf"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 6 #"config"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"          ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"ram-loadi"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"cpu-loadi"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ram-storei"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"cpu-storei"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"ram-sum"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")) ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"cpu-sum"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"config-storei"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 10 #"cpu-storei"
0 0 24 3 1 #" "
0 0 14 3 10 #"ram-storei"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"config-sum"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 1 #" "
0 0 14 3 7 #"cpu-sum"
0 0 24 3 1 #" "
0 0 14 3 7 #"ram-sum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(define "
0 0 17 3 9 #"add-state"
0 0 17 3 26 #" (next-config (next-config"
0 0 17 3 2 #" ("
0 0 17 3 38 #"next-config (next-config (next-config "
0 0 17 3 16 #"config-sum))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define input-state (next-config"
0 0 17 3 1 #"("
0 0 17 3 11 #"next-config"
0 0 17 3 2 #" ("
0 0 17 3 12 #"next-config("
0 0 17 3 11 #"next-config"
0 0 17 3 16 #" add-state))))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(define "
0 0 17 3 10 #"halt-state"
0 0 17 3 25 #" (next-config(next-config"
0 0 17 3 1 #"("
0 0 17 3 25 #"next-config(next-config ("
0 0 17 3 12 #"next-config("
0 0 17 3 11 #"next-config"
0 0 17 3 2 #" ("
0 0 17 3 11 #"next-config"
0 0 17 3 1 #"("
0 0 17 3 11 #"next-config"
0 0 17 3 1 #" "
0 0 17 3 18 #"add-state)))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";going to output state  (next-config("
0 0 17 3 11 #"next-config"
0 0 17 3 12 #"(next-config"
0 0 17 3 2 #" ("
0 0 17 3 11 #"next-config"
0 0 17 3 2 #" ("
0 0 17 3 11 #"next-config"
0 0 17 3 1 #" "
0 0 17 3 15 #"config-sum)))))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                              "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; ** problem 10 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Write three procedures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; (init-config lst)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; takes a list lst 16 bit patterns, and returns a TC-201 configurati"
 #"on "
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; in which those patterns are loaded into RAM starting with address "
 #"0, "
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; and the CPU registers are initialized so that the accumulator has"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; 16 zeroes, the program counter has 12 zeroes, the run flag has "
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; value 1, and the arithmetic error bit has value 0."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; (simulate steps config)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; takes a number of steps and a configuration config of the TC-201"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; and simulates (using next-config) the machine until the machine"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; halts (that is, the run flag is 0) or the given number of steps"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; have been executed, whichever occurs first.  The list"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; of successive configurations reached, starting from config, is ret"
 #"urned."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; (run steps prog)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; takes a number of steps and a symbolic assembly-language program"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; prog, and assembles the program (using assemble), and loads it"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; into memory (using init-config) and runs it until either it"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; halts or has run for the given number of steps (using simulate)."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 7 #"configs"
0 0 17 3 2 #" ("
0 0 17 3 3 #"run"
0 0 17 3 1 #" "
0 0 17 3 3 #"200"
0 0 17 3 1 #" "
0 0 17 3 10 #"prog-sum))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"patterns"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"  "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";> (init-config patterns)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(conf"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) '(0 0 0 0 0 0 0 0 0 0 0 0)"
 #" '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (list"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";> (simulate 5 (init-config patterns))"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";(list"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (conf"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";  (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) '(0 0 0 0 0 0 0 0 0 0 0 0"
 #") '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";   (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (conf"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";  (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0) '(0 0 0 0 0 0 0 0 0 0 0 1"
 #") '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";   (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (conf"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";  (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1) '(0 0 0 0 0 0 0 0 0 0 1 0"
 #") '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";   (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (conf"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";  (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1) '(0 0 0 0 0 0 0 0 0 0 1 1"
 #") '(1) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";   (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; (conf"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";  (cpu '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1) '(0 0 0 0 0 0 0 0 0 0 1 1"
 #") '(0) '(0))"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 0 '(0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 1 '(0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 2 '(0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 3 '(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 4 '(0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";   (entry 5 '(1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   (entry 6 '(0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";> (define configs (run 200 prog-sum))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 3"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";input = -14"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";input = 55"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 0"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";output = 44"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"init-config"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"conf"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cpu"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"init-config-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #")))    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"init-config-aux"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"i++"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"i++"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 15 #"init-config-aux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"i++"
0 0 24 3 7 #")))))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"simulate1"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"cpu-rf"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conf-cpu"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"config"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"simulate1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"next-config"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"simulate"
0 0 24 3 1 #" "
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"config"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"simulate"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"next-config"
0 0 24 3 1 #" "
0 0 14 3 6 #"config"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 5 #"steps"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"simulate"
0 0 24 3 1 #" "
0 0 14 3 5 #"steps"
0 0 24 3 2 #" ("
0 0 14 3 11 #"init-config"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assemble"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; ** problem 11 ** (10 points)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Write two programs for the TC-201, in the"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; format required by assemble."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; prog-sort-two"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; reads in two numbers from the user and"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; prints them out again, with the smaller of"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; the two printed first, and halts."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; prog-reverse"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; reads in a zero-terminated sequence of numbers from"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; the user, and then prints the numbers out in the reverse"
0 0 24 29 1 #"\n"
0 0 17 3 63
#"; order from which they were input (not including the final 0),"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; and halts."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; Note that you can do this problem even if your simulator"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; is not yet working.  Your programs will be tested with"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; the reference simulator."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Examples (showing the user interaction, not the configurations ret"
 #"urned.)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";> (define configs (run 200 prog-sort-two))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";input = 13"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 6"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";output = 6"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";output = 13"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";> (define configs (run 200 prog-sort-two))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";input = -11"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";input = -1"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";output = -11"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";output= -1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";> (define configs (run 200 prog-sort-two))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";input = 32767"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";input = -32768"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";output = -32768"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";output = 32767"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";> (define configs (run 200 prog-reverse))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 7"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 2"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";input = 15"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";input = -88"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";input = 0"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";output = -88"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";output = 15"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";output = 2"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";output = 7"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";> "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";************************************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"prog-sort-two"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"done"
0 0 19 3 4 #" yet"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"prog-reverse"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 19 3 1 #"\""
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 4 #"done"
0 0 19 3 1 #" "
0 0 19 3 4 #"yet\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";********************** end of hw5.rkt **********************"
0 0 24 29 1 #"\n"
0           0
